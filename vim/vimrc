
" ----- PLUGINS

call plug#begin('~/.vim/plugged')

if empty(glob('~/.vim/autoload/plug.vim')) " Automatic installation of vim-plug
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'stamblerre/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'sheerun/vim-polyglot'

" misc
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-commentary'
Plug 'arcticicestudio/nord-vim'

call plug#end()


" ----- SETTINGS
syntax on
filetype on
filetype plugin on
filetype indent on
set belloff=all
set number
set relativenumber
set nocompatible
set icon
set showmode
set showmatch
set history=100
set autowrite           " autosave when changing
set hidden              " when switching buffers
set cmdheight=1         " avoid HitEnter prompts
set shortmess=aoOtIF    " avoid HitEnter prompts
set nobackup            " more risky, but cleaner
set noswapfile
set nowritebackup
set ttyfast             " faster scrolling
set nofixendofline      " prevent silent fixing by vim
set incsearch           " highlight search while typing
set hlsearch
set ignorecase

set noruler
set laststatus=2
set statusline=
set statusline+=%*\ %<%.60F%*                 " path, trunc to 80 length
set statusline+=\ [%{strlen(&ft)?&ft:'none'}] " filetype
set statusline+=%*\ %l:%c%*                   " current line and column
set statusline+=%*\ %p%%%*                    " percentage

set nofoldenable    " disable folding
set textwidth=72
set linebreak
set tabstop=2
set shiftwidth=2
set smarttab
set smartindent
set autoindent
set expandtab       " replace tabs with spaces
set softtabstop=2
set wildmenu        " Better command search
set wildignorecase


" ----- FUNCTIONS & AUTO COMMANDS
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

augroup MY_AUTOCMDS
  autocmd BufWinEnter,BufNewFile,BufRead *.md set filetype=markdown
  autocmd BufNewFile,BufRead *.{yaml,yml} set filetype=yaml
  autocmd BufWritePre * :call TrimWhitespace()
  autocmd CompleteDone * silent! pclose!
augroup END


" ----- MAPPINGS
let mapleader = ' '
nnoremap <silent> <leader><CR> :noh<CR>:redraw!<CR>
map <F8> <Esc>:setlocal spell spelllang=de<CR>
map <F9> <Esc>:setlocal spell spelllang=en_gb<CR>
map <F10> <Esc>:setlocal spell spelllang=da<CR>
map <F11> <Esc>:setlocal nospell<CR>

" yank like D or C
noremap Y y$

" stay in visual mode
vnoremap < <gv
vnoremap > >gv

" better page down and page up
noremap <C-j> <C-d>
noremap <C-k> <C-b>


" ----- COLORS
if !has("gui_running")
  set term=xterm
endif
if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
  set t_Co=256
endif
if exists('+termguicolors') " vim background fix in tmux
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
" let base16colorspace=256  " Access colors present in 256 colorspac

colorscheme nord
hi ErrorMsg guibg=NONE guifg=red
hi Error guibg=NONE guifg=red
hi SpellBad guibg=NONE guifg=red
hi Normal guibg=NONE
hi SpecialKey guibg=NONE guifg=red
hi Conceal guibg=NONE
hi Comment guifg=#616E88
hi StatusLine guibg=NONE guifg=#616E88
hi StatusLineNC guibg=NONE guifg=#616E88
hi Search guibg=NONE guifg=#EBCB8B
hi IncSearch guibg=NONE guifg=#EBCB8B
hi ModeMsg guibg=NONE guifg=#B48EAD
hi MoreMsg guibg=NONE guifg=#B48EAD
hi MatchParen guibg=NONE guifg=#EBCB8B

