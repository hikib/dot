"2"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               plugins                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" Automatic installation of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  echom "Don't forget to :GoInstallBinaries if you're doing Go dev."
endif

if !has("gui_running")
  set term=xterm
endif

" flying
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
" Plug 'vimwiki/vimwiki'

" go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'stamblerre/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'sheerun/vim-polyglot'

" misc
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'rwxrob/vim-pandoc-syntax-simple'
" Plug 'lervag/vimtex'  " TODO: Use pandoc instead
Plug 'arcticicestudio/nord-vim'
Plug 'junegunn/goyo.vim'

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               settings                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

syntax on
filetype on
filetype plugin on
filetype indent on
set nonumber
set norelativenumber
set nocompatible
set icon
set showmode
set showmatch
set history=100
set autowrite           " autosave when changing
set hidden              " when switching buffers
set cmdheight=1         " avoid HitEnter prompts
set shortmess=aoOtIF    " avoid HitEnter prompts
set nobackup            " more risky, but cleaner
set noswapfile
set nowritebackup
set ttyfast             " faster scrolling
set nofixendofline      " prevent silent fixing by vim
set incsearch           " highlight search while typing
set hlsearch
set ignorecase

set noruler
set laststatus=2
set statusline=
set statusline+=%*\ %<%.60F%*                 " path, trunc to 80 length
set statusline+=\ [%{strlen(&ft)?&ft:'none'}] " filetype
set statusline+=%*\ %l:%c%*                   " current line and column
set statusline+=%*\ %p%%%*                    " percentage

set nofoldenable    " disable folding
set textwidth=72
set linebreak
set tabstop=2
set shiftwidth=2
set smarttab
set smartindent
set autoindent
set expandtab       " replace tabs with spaces
set softtabstop=2
set wildmenu        " Better command search
set wildignorecase

" let g:vimwiki_auto_header = 0
" let g:vimwiki_listsyms = ' .oOX'
" let g:vimwiki_markdown_link_ext = 1
" let g:vimwiki_dir_link = 'README'
" let g:vimwiki_list = [{'path': '~/vimwiki/',
"                       \ 'index': 'README',
"                       \ 'diary_index': 'README',
"                       \ 'diary_header': 'Journal',
"                       \ 'auto_toc': 0,
"                       \ 'auto_diary_index': 1,
"                       \ 'links_space_char': '-',
"                       \ 'syntax': 'markdown',
"                       \ 'ext': '.md'}]

" let g:pandoc#folding#fdc = 1
let g:pandoc#formatting#mode = 'h' " A'
let g:pandoc#formatting#textwidth = 72

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
colorscheme nord


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                        functions & autocommands                      "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim background fix in tmux
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

augroup MY_AUTOCMDS
  " TODO:
  " - create ftplugins for journal, reviewindex and other md files
  "   to call your magic commands
  " - autocmd BufNewFile, BufRead [journal regex] set filetype=journal
  " - autocmd BufNewFile, BufRead [reviewindex regex] set filetype=reviewindex
  autocmd BufNewFile ~/vimwiki/diary/[0-9]* :.!journaling %
  " autocmd BufWritePre ~/vimwiki/pipelines/reviews/README.md :1,$d | .!reviews %

  autocmd BufNewFile,BufRead *.md set filetype=pandoc
  autocmd BufNewFile,BufRead *.{yaml,yml} set filetype=yaml

  autocmd BufWritePre * :call TrimWhitespace()
  autocmd CompleteDone * silent! pclose!

  " transprent background
  autocmd VimEnter * hi Conceal guibg=NONE
  autocmd VimEnter * hi StatusLine guibg=NONE guifg=#EBCB8B
  autocmd VimEnter * hi Normal guibg=NONE
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               mappings                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ' '
nnoremap <silent> <leader><CR> :noh<CR>:redraw!<CR>
" noremap gf :e <CFILE><CR>
noremap gf :echo "asdf"

" yank like D or C
noremap Y y$

" Stay in visual mode
vnoremap < <gv
vnoremap > >gv

" Better page down and page up
noremap <C-j> <C-d>
noremap <C-k> <C-b>

" Search word under cursor
" https://github.com/hikmet-kibar/scripts/cmd/searchweb
nnoremap <silent> <leader>d :exec "!searchweb -page=duck "
                              \ . expand("<cword>")<CR> :redraw!<CR>
nnoremap <silent> <leader>o :exec "!searchweb -page=ordnet "
                              \ . expand("<cword>")<CR> :redraw!<CR>
nnoremap <silent> <leader>k :exec "!searchweb -page=korpus "
                              \ . expand("<cword>")<CR> :redraw!<CR>
nnoremap <silent> <leader>t :exec "!searchweb -page=tysk "
                              \ . expand("<cword>")<CR> :redraw!<CR>

" fzf
nnoremap <C-f> :Files<CR>
nnoremap <C-b> :Buffers<CR>

