"  ---- PLUGINS
" Install vim-plug:
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" prevent polyglot from overwriting markdown
" must be before plug#begin
let g:polyglot_disabled = ['markdown', 'rust', 'go']

call plug#begin('~/.vim/plugged')

Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

" ---- COC
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
inoremap <silent><expr> <c-@> coc#refresh()

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


" ---- LANGUAGE SPECIFIC
if executable("go")
  Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
endif
if executable("rustc")
  Plug 'rust-lang/rust.vim'
endif

call plug#end()

" ---- SOURCES
source ~/.vim/functions.vim " functions and autocommands
source ~/.vim/mappings.vim

" ---- SETTINGS
filetype indent on
filetype on
filetype plugin on
syntax on

" set number
" set relativenumber
set autowrite           " autosave when changing
set belloff=all
set cmdheight=1         " avoid HitEnter prompts
set encoding=utf-8
set hidden              " when switching buffers
set history=100
set hlsearch
set icon
set ignorecase
set incsearch           " highlight search while typing
set nobackup            " more risky, but cleaner
set nocompatible
set nofixendofline      " prevent silent fixing by vim
set nonumber
set noswapfile
set shortmess=aoOtIF    " avoid HitEnter prompts
set showmatch
set showmode
set ttyfast             " faster scrolling

set foldenable
set laststatus=2
set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|>
set nofixendofline      " better ascii friendly listchars
set noruler
set path+=**
set statusline+=%*\ %<%.60F%*                 " path, trunc to 80 length
set statusline+=%*\ %l:%c%*                   " current line and column
set statusline+=%*\ %p%%%*                    " percentage
set statusline+=\ [%{strlen(&ft)?&ft:'none'}] " filetype
set statusline=
set wrapscan

set autoindent
set expandtab       " replace tabs with spaces
set linebreak
set shiftwidth=2
set smartindent
set smarttab
set softtabstop=2
set tabstop=2
set textwidth=72
set wildignorecase
set wildmenu        " Better command search

hi! link netrwMarkFile Search
let g:netrw_altv = 1
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_fastbrowse = 0
let g:netrw_keepdir = 0
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+' " dotfiles
let g:netrw_liststyle=3
let g:netrw_winsize = 25

" ---- Colors

" hi Conceal guibg=NONE
" Access colors present in 256 colorspace:
" let base16colorspace=256
set background=dark
set termguicolors

" form github.com/prateektade/rosepine-vim
colorscheme rosepine

" Copied and made changes to vim-monotone
" github.com/Lokaltog/vim-monotone
" colorscheme monotone
